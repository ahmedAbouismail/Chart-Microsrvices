springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: htw.berlin.microservices.composite.chart
  pathsToMatch: /**
  cache.disabled: true

  swagger-ui:
    oauth2-redirect-url: https://localhost:8443/webjars/swagger-ui/oauth2-redirect.html
    oauth:
      clientId: writer
      clientSecret: '{cipher}4ec25f436feb83f24d23a89f70b5bc374d4afac0b4693bd9fe527183d1f83893'
      useBasicAuthenticationWithAccessCodeGrant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token

server.forward-headers-strategy: framework

api:

  common:
    version: 1.0.0
    title: Chart Grades
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: Ahmed Abouismail
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  chart-composite:

    get-composite-chart:
      description: Returns a composite view of the specified chart id
      notes: |
        # Normal response
        If the requested chart id is found the method will return information regarding:
        1. Chart information
        1. Data
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        1. If no chart  information is found, a **404 - Not Found** error will be returned
        1. In no data are found for a chart, a partial response will be returned
    create-composite-chart:
      description: Creates a composite chart
      notes: |
        # Normal response
        The composite chart information posted to the API will be split up and stored as separate chart-info, data entities.
        # Expected error responses
        1. If a chart with the same chartId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned
    delete-composite-chart:
      description: Deletes a chart composite
      notes: |
        # Normal response
        Entities for chart information, data related to the specified chartId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non-existing chart  will return **200 Ok**.
server.port: 7000
server.error.include-message: always

spring.cloud.stream:
  default.contentType: application/json
  bindings:
    charts-out-0:
      destination: charts
      producer:
        required-groups: auditGroup
    data-out-0:
      destination: data
      producer:
        required-groups: auditGroup

spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999

#resilience4j.timelimiter:
#  instances:
#    chart:
#      timeoutDuration: 2s
#
#resilience4j.retry:
#  instances:
#    chart:
#      maxAttempts: 3
#      waitDuration: 1000
#      retryExceptions:
#        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError
#
#management.health.circuitbreakers.enabled: true
#
#resilience4j.circuitbreaker:
#  instances:
#    chart:
#      allowHealthIndicatorToFail: false
#      registerHealthIndicator: true
#      slidingWindowType: COUNT_BASED
#      slidingWindowSize: 5
#      failureRateThreshold: 50
#      waitDurationInOpenState: 10000
#      permittedNumberOfCallsInHalfOpenState: 3
#      automaticTransitionFromOpenToHalfOpenEnabled: true
#      ignoreExceptions:
#        - htw.berlin.api.exceptions.InvalidInputException
#        - htw.berlin.api.exceptions.NotFoundException

logging:
  level:
    root: INFO
    htw.berlin: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

---
spring.config.activate.on-profile: docker

server.port: 8080

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.charts-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.data-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

